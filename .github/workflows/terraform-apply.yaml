name: Deploy Terraform on GCP (PROD Environment)

on:
  push:
    branches:
      - main
    paths:
      - 'environments/**/**/*.tfvars'  # Trigger only on .tfvars changes

jobs:
  apply:
    name: Check and Apply
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for git diff

      # Step 2: Set environment
      - name: Set Target Environment
        run: |
          echo "environment=prod" >> $GITHUB_ENV

      # Step 3: Authenticate to Google Cloud
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          create_credentials_file: true
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      # Step 4: Authenticate with GitHub
      - name: Authenticate with GitHub
        run: |
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com".insteadOf "https://github.com"

      # Step 5: Setup Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      # Step 6: Detect modified directories
      - name: Detect modified directories
        id: detect_changes
        run: |
          CHANGED_DIRS=""
          OUTPUT_FILE="changed_directories.txt"
          > $OUTPUT_FILE

          # Ensure full commit history is available
          git fetch --unshallow || true
          git fetch origin main

          # Compare last commit (HEAD^) with current (HEAD)
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "🔍 Changed files:"
          echo "$CHANGED_FILES"

          # Detect first-level directories with .tfvars changes
          for dir in $(find environments/${{ env.environment }} -mindepth 1 -maxdepth 1 -type d); do
            if echo "$CHANGED_FILES" | grep -q "^$dir/.*\.tfvars$"; then
              echo "$dir" >> $OUTPUT_FILE
              CHANGED_DIRS="$CHANGED_DIRS $dir"
            fi
          done

          if [ ! -s $OUTPUT_FILE ]; then
            echo "✅ No modified .tfvars files found. Skipping Terraform apply."
            echo "changed_dirs=" >> $GITHUB_ENV
            exit 0
          fi

          echo "Changed directories:"
          cat $OUTPUT_FILE
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV

      # Step 7: Terraform init & plan
      - name: Initialize and Plan Terraform
        if: env.changed_dirs != ''
        run: |
          for dir in ${{ env.changed_dirs }}; do
            echo "🔧 Running terraform init and plan for $dir"
            cd $dir
            module_name=$(basename $dir | sed 's/^environments-${{ env.environment }}-//')
            terraform init -backend-config=../state.config -backend-config="prefix=${{ env.environment }}/terraform/${module_name}/terraform.tfstate"
            terraform plan
            cd $GITHUB_WORKSPACE
          done

      # Step 8: Terraform apply
      - name: Apply Terraform
        if: env.changed_dirs != ''
        run: |
          for dir in ${{ env.changed_dirs }}; do
            echo "🚀 Applying terraform for $dir"
            cd $dir
            terraform apply -auto-approve
            cd $GITHUB_WORKSPACE
          done
