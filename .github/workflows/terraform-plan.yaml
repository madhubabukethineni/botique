name: Deploy Terraform on GCP (Dev/Test/Stage/Prod Environment)
 
on:
  push:
    paths:
      - 'environments/**/**/*.tfvars'  
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
    paths:
      - 'environments/**/**/*.tfvars'  
 
jobs:
  plan:
    name: Check and Plan
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}  # Only run for pull requests
 
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2  # Fetch the last two commits to resolve HEAD~1
       
      - name: Get Target Branch
        id: get_branch
        run: |
          if [ "${{ github.event.pull_request.base.ref }}" == "main" ]; then
            echo "environment=prod" >> $GITHUB_ENV
          else
            echo "environment=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          fi
     
      # - name: Get GCP project
      #   id: env-mapper
      #   uses: ./.github/actions/env-to-gcp-mapper
      #   with:
      #     environment: ${{ env.environment }}
      # Step 2: Authenticate to Google Cloud using Workload Identity Federation
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: true
          workload_identity_provider:  ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
 
       # Step 3: Authenticate with GitHub
      - name: Authenticate with GitHub
        run: |
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com".insteadOf "https://github.com"
 
      # Step 4: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
 
      # Step 5: Detect modified .tfvars files and affected directories
      - name: Detect modified directories based on .tfvars files
        id: detect_changes
        run: |
          # Initialize an empty variable to store changed directories
          CHANGED_DIRS=""
 
          # Create a file to store the results
          OUTPUT_FILE="changed_directories.txt"
          > $OUTPUT_FILE  # Clear the previous content of the file
 
          # Handle push event (latest commit)
          if [ "${{ github.event_name }}" == "push" ]; then
            # Get the list of modified files from the latest commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
 
          # Handle PR event (base and head commits)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Get the list of modified files from the PR (base commit vs head commit)
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          fi
 
          # Loop through each subdirectory under environments
          for dir in $(find environments/${{ env.environment }} -mindepth 1 -maxdepth 1 -type d); do
            # Check if any .tfvars file is modified or added in the directory
            if echo "$CHANGED_FILES" | grep -q "^$dir/.*\.tfvars$"; then
              # Log the directory into the text file
              echo "$dir" >> $OUTPUT_FILE
              #echo "Modified directory: $dir"  # Echo the directory to the console
              CHANGED_DIRS="$CHANGED_DIRS $dir"
            fi
          done
 
          # Check if the file has any entries, else exit
          if [ ! -s $OUTPUT_FILE ]; then
            echo "No modified .tfvars files found."
            exit 0
          fi
 
          # Save the directories with modified .tfvars files to an environment variable
          #echo "changed_dirs=$(cat $OUTPUT_FILE)" >> $GITHUB_ENV
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV
 
      # Step: Install Trivy CLI
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
 
      # Step: Trivy IaC scan for Terraform (runtime report only, non-blocking)
      - name: Scan Terraform with Trivy (console output only)
        run: |
          for dir in ${{ env.changed_dirs }}; do
            echo "üîç Scanning $dir with Trivy..."
            cd $GITHUB_WORKSPACE
            cd $dir
            trivy config --severity HIGH,CRITICAL --exit-code 0 --format table .
            echo "‚úÖ Scan completed for $dir"
          done
 
 
      # Step 6: Initialize Terraform and Plan for each changed directory
      - name: Initialize and Plan Terraform
        run: |
          for dir in ${{ env.changed_dirs }}; do
            echo "Running terraform init and plan for $dir"
            #Ensure we're back in the root directory before changing to the next directory
            cd $GITHUB_WORKSPACE  # Go back to the root of the repository
            # Change to the directory before running terraform commands
            cd $dir
            module_name=$(basename $dir | sed 's/^environments-${{ env.environment }}-//')
            terraform init -backend-config=../state.config -backend-config="prefix=${{ env.environment }}/terraform/${module_name}/terraform.tfstate"
            terraform plan
          done